/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExprParser.jj */
/*@egen*///\u30aa\u30d7\u30b7\u30e7\u30f3\u5b9a\u7fa9
options{
	STATIC=false;
	           
	             
	                                                  
	DEBUG_PARSER = true;
}

//\u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9
PARSER_BEGIN(ExprParser)
package tk.oknctict.izanagi.parser;
public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTExprParserState jjtree = new JJTExprParserState();

/*@egen*/
}
PARSER_END(ExprParser)

//\u30c8\u30fc\u30af\u30f3\u306e\u5b9a\u7fa9
SKIP:
{
	" " | "\r" | "\t" | "\n"
}
TOKEN:
{
		<FUNC: "Function">
	|	<ENDFUNC: "End Function">
	|	<IF: "If">
	|	<THEN: "Then">
	|	<ELSEIF: "ElseIf">
	|	<ELSE: "Else">
	|	<ENDIF: "End If">
	|	<WHILE: "While">
	|	<ENDWHILE: "End While">
	|	<SELECT: "Select">
	|	<COLON: ":">
	|	<CASE: "Case">
	|	<CASEELSE: "Case Else">
	|	<ENDSELECT: "End Select">
	|	<DIM: "Dim">
	|	<AS: "as">
	|	<RETURN: "Return">
	|	<BREAK: "Break">
	|	<CONTINUE: "Continue">
	|	<PRINT: "Print">
	|	<TYPE: ("Integer" | "Float" | "String")>
}
TOKEN:
{
		<PLUS : "+">
	|   <MINUS: "-">
	|	<MUL: "*">
	|	<DIV: "/">
	|	<MOD: "%">
	|	<POWER: "^">
	|	<AND: "And">
	|	<OR: "Or">
	|	<NOT: "Not">
	|	<GE: ">=">
	|	<LE: "<=">
	|	<GT: ">">
	|	<LT: "<">
	|	<EQ: "==">
	|	<NEQ: "!=">
	|	<BOOLAND: "&&">
	|	<BOOLOR: "||">
	|	<ASSIGN: "=">
	|	<ADDASSIGN: "+=">
	|	<SUBASSIGN: "-=">
	|	<MULASSIGN: "*=">
	|	<DIVASSIGN: "/=">
	|	<MODASSIGN: "%=">
	|	<POWASSIGN: "^=">
	|	<LPAREN: "(">
	|	<RPAREN: ")">
	|	<LBRACKET: "[">
	|	<RBRACKET: "]">
	|	<COMMA: ",">
	|	<STR_START: "\""> : IN_STR
	|   <INTEGER: (["0" - "9"])+>
	|	<FLOAT: (["0" - "9"])+ "." (["0" - "9"])+>
	|	<IDENTIFIER: (["a"-"z"] | ["A"-"Z"] | "_") (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")*>
}

<IN_STR> MORE:
{
		<~["\"", "\\", "\n", "\r", "\t"]>
	|	<"\\\"">
			{image.deleteCharAt(image.length() - 2); }
	|	<"\\n" | "\\r">
			{image.delete(image.length() - 2, image.length()); image.append("\n");}
	|	<"\\t">
			{image.delete(image.length() - 2, image.length()); image.append("\t");}
}

<IN_STR> TOKEN:
{
	<STR: "\"">{
		image.deleteCharAt(image.length() - 1);
		matchedToken.image = image.toString();
	} : DEFAULT
}

//\u6587\u6cd5\u306e\u5b9a\u7fa9
ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Stmts() <EOF>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmts():
{/*@bgen(jjtree) Stmts */
  ASTStmts jjtn000 = new ASTStmts(JJTSTMTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmts */
        try {
/*@egen*/
	(Stmt())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Block():
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	(Stmt())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileBlock():
{/*@bgen(jjtree) WhileBlock */
  ASTWhileBlock jjtn000 = new ASTWhileBlock(JJTWHILEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileBlock */
        try {
/*@egen*/
	(Stmt())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FuncBlock():
{/*@bgen(jjtree) FuncBlock */
  ASTFuncBlock jjtn000 = new ASTFuncBlock(JJTFUNCBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncBlock */
        try {
/*@egen*/
	(Stmt())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Arguments():
{/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
        try {
/*@egen*/
	<LPAREN> 
			(<RPAREN>
		|	Argument() (<COMMA> Argument())* <RPAREN>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Argument():
{/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
	Identifier() <AS> t = <TYPE>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmt():
{/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
                try {
/*@egen*/
		DefFunc()
	|	IfStmt() 
	|	WhileStmt()
	|	SelectStmt()
	|	DimStmt() 
	|	BreakStmt()
	|	ContinueStmt()
	|	PrintStmt()
	|	LOOKAHEAD(2) ReturnStmt()
	|	LOOKAHEAD(2) CallFunc()
	|	LOOKAHEAD(2) Expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/ 
}

void DefFunc():
{/*@bgen(jjtree) DefFunc */
  ASTDefFunc jjtn000 = new ASTDefFunc(JJTDEFFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) DefFunc */
        try {
/*@egen*/
	<FUNC> FuncName() Arguments() <AS> t = <TYPE> {jjtn000.nodeValue = t.image;}
		FuncBlock()
	<ENDFUNC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void CallFunc():
{/*@bgen(jjtree) CallFunc */
  ASTCallFunc jjtn000 = new ASTCallFunc(JJTCALLFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CallFunc */
        try {
/*@egen*/
	FuncName() <LPAREN> 
				(<RPAREN>
			|	CompExpr() (<COMMA> CompExpr())* <RPAREN>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfStmt():
{/*@bgen(jjtree) IfStmt */
  ASTIfStmt jjtn000 = new ASTIfStmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) IfStmt */
        try {
/*@egen*/
	<IF> <LPAREN> CompExpr() <RPAREN> <THEN>
		Block()
	(<ELSEIF> <LPAREN> CompExpr() <RPAREN> <THEN>
		Block()
	)*
	(<ELSE>
		Block()
	)?
	<ENDIF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileStmt():
{/*@bgen(jjtree) WhileStmt */
  ASTWhileStmt jjtn000 = new ASTWhileStmt(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStmt */
        try {
/*@egen*/
	<WHILE> CompExpr() 
		WhileBlock()
	<ENDWHILE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SelectStmt():
{/*@bgen(jjtree) SelectStmt */
  ASTSelectStmt jjtn000 = new ASTSelectStmt(JJTSELECTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectStmt */
        try {
/*@egen*/
	<SELECT> CompExpr() 
		(<CASE> CompExpr() <COLON>
			Block())+

		(<CASEELSE>  <COLON>
			Block())?
	<ENDSELECT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DimStmt():
{/*@bgen(jjtree) DimStmt */
  ASTDimStmt jjtn000 = new ASTDimStmt(JJTDIMSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) DimStmt */
        try {
/*@egen*/
	<DIM> Identifier() (Subscript())? <AS> t = <TYPE>/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void BreakStmt():
{/*@bgen(jjtree) BreakStmt */
  ASTBreakStmt jjtn000 = new ASTBreakStmt(JJTBREAKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStmt */
        try {
/*@egen*/
	<BREAK>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ContinueStmt():
{/*@bgen(jjtree) ContinueStmt */
  ASTContinueStmt jjtn000 = new ASTContinueStmt(JJTCONTINUESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStmt */
        try {
/*@egen*/
	<CONTINUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PrintStmt():
{/*@bgen(jjtree) PrintStmt */
  ASTPrintStmt jjtn000 = new ASTPrintStmt(JJTPRINTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrintStmt */
        try {
/*@egen*/
	<PRINT> CompExpr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ReturnStmt():
{/*@bgen(jjtree) ReturnStmt */
  ASTReturnStmt jjtn000 = new ASTReturnStmt(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStmt */
        try {
/*@egen*/
	<RETURN> CompExpr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//void VarArray():
//{}
//{
//	t = <IDENTIFIER> {jjtThis.nodeValue = t.image}
//	<LPAREN> ExpressionList() <RpAREN> 
//}

void ExpressionList()      :
{}
{
	Expression() (<COMMA> Expression())*
}

void Expression()      :
{}
{
	AssignExpr()
}

void AssignExpr()      :
{}
{
	Var() (
				<ASSIGN>/*@bgen(jjtree) #Assign( 2) */
                                         {
                                           ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
                                         }
/*@egen*/           
			|	<ADDASSIGN>/*@bgen(jjtree) #AddAssign( 2) */
                                            {
                                              ASTAddAssign jjtn002 = new ASTAddAssign(JJTADDASSIGN);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte002) {
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte002;
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                throw (ParseException)jjte002;
                                              }
                                              throw (Error)jjte002;
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
                                            }
/*@egen*/              
			|	<SUBASSIGN>/*@bgen(jjtree) #SubAssign( 2) */
                                            {
                                              ASTSubAssign jjtn003 = new ASTSubAssign(JJTSUBASSIGN);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
                                            }
                                            try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte003) {
                                              if (jjtc003) {
                                                jjtree.clearNodeScope(jjtn003);
                                                jjtc003 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte003 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte003;
                                              }
                                              if (jjte003 instanceof ParseException) {
                                                throw (ParseException)jjte003;
                                              }
                                              throw (Error)jjte003;
                                            } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003,  2);
                                              }
                                            }
/*@egen*/              
			|	<MULASSIGN>/*@bgen(jjtree) #MulAssign( 2) */
                                            {
                                              ASTMulAssign jjtn004 = new ASTMulAssign(JJTMULASSIGN);
                                              boolean jjtc004 = true;
                                              jjtree.openNodeScope(jjtn004);
                                            }
                                            try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte004) {
                                              if (jjtc004) {
                                                jjtree.clearNodeScope(jjtn004);
                                                jjtc004 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte004 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte004;
                                              }
                                              if (jjte004 instanceof ParseException) {
                                                throw (ParseException)jjte004;
                                              }
                                              throw (Error)jjte004;
                                            } finally {
                                              if (jjtc004) {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                              }
                                            }
/*@egen*/              
			|	<DIVASSIGN>/*@bgen(jjtree) #DivAssign( 2) */
                                            {
                                              ASTDivAssign jjtn005 = new ASTDivAssign(JJTDIVASSIGN);
                                              boolean jjtc005 = true;
                                              jjtree.openNodeScope(jjtn005);
                                            }
                                            try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte005) {
                                              if (jjtc005) {
                                                jjtree.clearNodeScope(jjtn005);
                                                jjtc005 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte005 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte005;
                                              }
                                              if (jjte005 instanceof ParseException) {
                                                throw (ParseException)jjte005;
                                              }
                                              throw (Error)jjte005;
                                            } finally {
                                              if (jjtc005) {
                                                jjtree.closeNodeScope(jjtn005,  2);
                                              }
                                            }
/*@egen*/              
			|	<MODASSIGN>/*@bgen(jjtree) #ModAssign( 2) */
                                            {
                                              ASTModAssign jjtn006 = new ASTModAssign(JJTMODASSIGN);
                                              boolean jjtc006 = true;
                                              jjtree.openNodeScope(jjtn006);
                                            }
                                            try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte006) {
                                              if (jjtc006) {
                                                jjtree.clearNodeScope(jjtn006);
                                                jjtc006 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte006 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte006;
                                              }
                                              if (jjte006 instanceof ParseException) {
                                                throw (ParseException)jjte006;
                                              }
                                              throw (Error)jjte006;
                                            } finally {
                                              if (jjtc006) {
                                                jjtree.closeNodeScope(jjtn006,  2);
                                              }
                                            }
/*@egen*/              
			|	<POWASSIGN>/*@bgen(jjtree) #PowAssign( 2) */
                                            {
                                              ASTPowAssign jjtn007 = new ASTPowAssign(JJTPOWASSIGN);
                                              boolean jjtc007 = true;
                                              jjtree.openNodeScope(jjtn007);
                                            }
                                            try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte007) {
                                              if (jjtc007) {
                                                jjtree.clearNodeScope(jjtn007);
                                                jjtc007 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte007 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte007;
                                              }
                                              if (jjte007 instanceof ParseException) {
                                                throw (ParseException)jjte007;
                                              }
                                              throw (Error)jjte007;
                                            } finally {
                                              if (jjtc007) {
                                                jjtree.closeNodeScope(jjtn007,  2);
                                              }
                                            }
/*@egen*/               )
}

void CompExpr()      :
{}
{
	BoolCompExpr()
}

void BoolCompExpr()      :
{}
{
	EqualCompExpr() (
				<BOOLAND>/*@bgen(jjtree) #BAnd( 2) */
                                          {
                                            ASTBAnd jjtn001 = new ASTBAnd(JJTBAND);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
                                          }
                                          try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte001) {
                                            if (jjtc001) {
                                              jjtree.clearNodeScope(jjtn001);
                                              jjtc001 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte001 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte001;
                                            }
                                            if (jjte001 instanceof ParseException) {
                                              throw (ParseException)jjte001;
                                            }
                                            throw (Error)jjte001;
                                          } finally {
                                            if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001,  2);
                                            }
                                          }
/*@egen*/         
			|	<BOOLOR>/*@bgen(jjtree) #BOr( 2) */
                                         {
                                           ASTBOr jjtn002 = new ASTBOr(JJTBOR);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*/ EqualCompExpr()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte002) {
                                           if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte002;
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             throw (ParseException)jjte002;
                                           }
                                           throw (Error)jjte002;
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  2);
                                           }
                                         }
/*@egen*/         )*
}

void EqualCompExpr()      :
{}
{
	SizeCompExpr() (
				<EQ>/*@bgen(jjtree) #Eq( 2) */
                                     {
                                       ASTEq jjtn001 = new ASTEq(JJTEQ);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ SizeCompExpr()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/       
			|	<NEQ>/*@bgen(jjtree) #NEq( 2) */
                                      {
                                        ASTNEq jjtn002 = new ASTNEq(JJTNEQ);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ SizeCompExpr()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte002;
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          throw (ParseException)jjte002;
                                        }
                                        throw (Error)jjte002;
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
                                      }
/*@egen*/         )*
}

void SizeCompExpr()      :
{}
{
	AddExpr() (
				<GE>/*@bgen(jjtree) #Ge( 2) */
                                     {
                                       ASTGe jjtn001 = new ASTGe(JJTGE);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/       
			|	<GT>/*@bgen(jjtree) #Gt( 2) */
                                     {
                                       ASTGt jjtn002 = new ASTGt(JJTGT);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                     }
                                     try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte002) {
                                       if (jjtc002) {
                                         jjtree.clearNodeScope(jjtn002);
                                         jjtc002 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte002 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte002;
                                       }
                                       if (jjte002 instanceof ParseException) {
                                         throw (ParseException)jjte002;
                                       }
                                       throw (Error)jjte002;
                                     } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002,  2);
                                       }
                                     }
/*@egen*/       
			|	<LE>/*@bgen(jjtree) #Le( 2) */
                                     {
                                       ASTLe jjtn003 = new ASTLe(JJTLE);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                     }
                                     try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte003) {
                                       if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte003;
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         throw (ParseException)jjte003;
                                       }
                                       throw (Error)jjte003;
                                     } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  2);
                                       }
                                     }
/*@egen*/       
			|	<LT>/*@bgen(jjtree) #Lt( 2) */
                                     {
                                       ASTLt jjtn004 = new ASTLt(JJTLT);
                                       boolean jjtc004 = true;
                                       jjtree.openNodeScope(jjtn004);
                                     }
                                     try {
/*@egen*/ AddExpr()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte004) {
                                       if (jjtc004) {
                                         jjtree.clearNodeScope(jjtn004);
                                         jjtc004 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte004 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte004;
                                       }
                                       if (jjte004 instanceof ParseException) {
                                         throw (ParseException)jjte004;
                                       }
                                       throw (Error)jjte004;
                                     } finally {
                                       if (jjtc004) {
                                         jjtree.closeNodeScope(jjtn004,  2);
                                       }
                                     }
/*@egen*/        )*
}

void AddExpr()      :
{}
{
	MulExpr() (
				<PLUS>/*@bgen(jjtree) #Add( 2) */
                                        {
                                          ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/  MulExpr()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte001) {
                                          if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte001;
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            throw (ParseException)jjte001;
                                          }
                                          throw (Error)jjte001;
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
                                        }
/*@egen*/        
			|   <MINUS>/*@bgen(jjtree) #Sub( 2) */
                                    {
                                      ASTSub jjtn002 = new ASTSub(JJTSUB);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*/ MulExpr()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte002;
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        throw (ParseException)jjte002;
                                      }
                                      throw (Error)jjte002;
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
                                    }
/*@egen*/         )*
}

void MulExpr()      :
{}
{
	UniExpr() (
				<MUL>/*@bgen(jjtree) #Mul( 2) */
                                      {
                                        ASTMul jjtn001 = new ASTMul(JJTMUL);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*/ UniExpr()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte001;
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          throw (ParseException)jjte001;
                                        }
                                        throw (Error)jjte001;
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
                                      }
/*@egen*/        
			|	<DIV>/*@bgen(jjtree) #Div( 2) */
                                      {
                                        ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ UniExpr()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte002;
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          throw (ParseException)jjte002;
                                        }
                                        throw (Error)jjte002;
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
                                      }
/*@egen*/        
			|	<MOD>/*@bgen(jjtree) #Mod( 2) */
                                      {
                                        ASTMod jjtn003 = new ASTMod(JJTMOD);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
                                      }
                                      try {
/*@egen*/ UniExpr()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte003) {
                                        if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte003;
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          throw (ParseException)jjte003;
                                        }
                                        throw (Error)jjte003;
                                      } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
                                      }
/*@egen*/        
			|	<POWER>/*@bgen(jjtree) #Power( 2) */
                                        {
                                          ASTPower jjtn004 = new ASTPower(JJTPOWER);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                                        }
                                        try {
/*@egen*/ UniExpr()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte004) {
                                          if (jjtc004) {
                                            jjtree.clearNodeScope(jjtn004);
                                            jjtc004 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte004 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte004;
                                          }
                                          if (jjte004 instanceof ParseException) {
                                            throw (ParseException)jjte004;
                                          }
                                          throw (Error)jjte004;
                                        } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  2);
                                          }
                                        }
/*@egen*/          
			|	<AND>/*@bgen(jjtree) #And( 2) */
                                      {
                                        ASTAnd jjtn005 = new ASTAnd(JJTAND);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
                                      }
                                      try {
/*@egen*/ UniExpr()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte005) {
                                        if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte005;
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          throw (ParseException)jjte005;
                                        }
                                        throw (Error)jjte005;
                                      } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
                                      }
/*@egen*/        
			|	<OR>/*@bgen(jjtree) #Or( 2) */
                                     {
                                       ASTOr jjtn006 = new ASTOr(JJTOR);
                                       boolean jjtc006 = true;
                                       jjtree.openNodeScope(jjtn006);
                                     }
                                     try {
/*@egen*/ UniExpr()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte006) {
                                       if (jjtc006) {
                                         jjtree.clearNodeScope(jjtn006);
                                         jjtc006 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte006 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte006;
                                       }
                                       if (jjte006 instanceof ParseException) {
                                         throw (ParseException)jjte006;
                                       }
                                       throw (Error)jjte006;
                                     } finally {
                                       if (jjtc006) {
                                         jjtree.closeNodeScope(jjtn006,  2);
                                       }
                                     }
/*@egen*/       
			|	<NOT>/*@bgen(jjtree) #Not( 2) */
                                      {
                                        ASTNot jjtn007 = new ASTNot(JJTNOT);
                                        boolean jjtc007 = true;
                                        jjtree.openNodeScope(jjtn007);
                                      }
                                      try {
/*@egen*/ UniExpr()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte007) {
                                        if (jjtc007) {
                                          jjtree.clearNodeScope(jjtn007);
                                          jjtc007 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte007 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte007;
                                        }
                                        if (jjte007 instanceof ParseException) {
                                          throw (ParseException)jjte007;
                                        }
                                        throw (Error)jjte007;
                                      } finally {
                                        if (jjtc007) {
                                          jjtree.closeNodeScope(jjtn007,  2);
                                        }
                                      }
/*@egen*/         )*
}

void UniExpr():
{/*@bgen(jjtree) UniExpr */
  ASTUniExpr jjtn000 = new ASTUniExpr(JJTUNIEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) UniExpr */
                try {
/*@egen*/
		Literal()/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.nodeValue = "+";}
	|	t = <MINUS> {jjtn000.nodeValue = t.image;} Literal()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void Literal()      :
{}
{
		Integer()
	|	Float()
	|	String()
	|	<LPAREN> CompExpr() <RPAREN>
	|	LOOKAHEAD(2) CallFunc()
	|	LOOKAHEAD(2) RefVar()
}

void Integer():
{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	t = <INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Float():
{/*@bgen(jjtree) Float */
  ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Float */
        try {
/*@egen*/
	t = <FLOAT>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void String():
{/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	<STR_START>
	t = <STR>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Var():
{/*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Var */
        try {
/*@egen*/
	t = <IDENTIFIER> {jjtn000.nodeValue = t.image;} (Subscript())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RefVar():
{/*@bgen(jjtree) RefVar */
  ASTRefVar jjtn000 = new ASTRefVar(JJTREFVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) RefVar */
        try {
/*@egen*/
	t = <IDENTIFIER> {jjtn000.nodeValue = t.image;} (Subscript())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Subscript():
{/*@bgen(jjtree) Subscript */
  ASTSubscript jjtn000 = new ASTSubscript(JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Subscript */
        try {
/*@egen*/
	<LBRACKET> CompExpr() (<COMMA> CompExpr())* <RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void FuncName():
{/*@bgen(jjtree) FuncName */
  ASTFuncName jjtn000 = new ASTFuncName(JJTFUNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) FuncName */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Identifier():
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}