/* ExprParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ExprParser.java */
package tk.oknctict.izanagi.parser;
public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants, ExprParserConstants {/*@bgen(jjtree)*/
  protected JJTExprParserState jjtree = new JJTExprParserState();

//文法の定義
  final public ASTStart Start() throws ParseException {
    trace_call("Start");
    try {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Stmts();
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
  }

  final public void Stmts() throws ParseException {
    trace_call("Stmts");
    try {/*@bgen(jjtree) Stmts */
  ASTStmts jjtn000 = new ASTStmts(JJTSTMTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_1:
        while (true) {
          Stmt();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FUNC:
          case IF:
          case WHILE:
          case SELECT:
          case DIM:
          case RETURN:
          case BREAK:
          case CONTINUE:
          case PRINT:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Stmts");
    }
  }

  final public void Block() throws ParseException {
    trace_call("Block");
    try {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_2:
        while (true) {
          Stmt();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FUNC:
          case IF:
          case WHILE:
          case SELECT:
          case DIM:
          case RETURN:
          case BREAK:
          case CONTINUE:
          case PRINT:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Block");
    }
  }

  final public void WhileBlock() throws ParseException {
    trace_call("WhileBlock");
    try {/*@bgen(jjtree) WhileBlock */
  ASTWhileBlock jjtn000 = new ASTWhileBlock(JJTWHILEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_3:
        while (true) {
          Stmt();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FUNC:
          case IF:
          case WHILE:
          case SELECT:
          case DIM:
          case RETURN:
          case BREAK:
          case CONTINUE:
          case PRINT:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("WhileBlock");
    }
  }

  final public void FuncBlock() throws ParseException {
    trace_call("FuncBlock");
    try {/*@bgen(jjtree) FuncBlock */
  ASTFuncBlock jjtn000 = new ASTFuncBlock(JJTFUNCBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_4:
        while (true) {
          Stmt();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FUNC:
          case IF:
          case WHILE:
          case SELECT:
          case DIM:
          case RETURN:
          case BREAK:
          case CONTINUE:
          case PRINT:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("FuncBlock");
    }
  }

  final public void Arguments() throws ParseException {
    trace_call("Arguments");
    try {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          jj_consume_token(RPAREN);
          break;
          }
        case IDENTIFIER:{
          Argument();
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[4] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            Argument();
          }
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Arguments");
    }
  }

  final public void Argument() throws ParseException {
    trace_call("Argument");
    try {/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        Identifier();
        jj_consume_token(AS);
        t = jj_consume_token(TYPE);
jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
jjtn000.nodeValue = t.image;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Argument");
    }
  }

  final public void Stmt() throws ParseException {
    trace_call("Stmt");
    try {/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNC:{
          DefFunc();
          break;
          }
        case IF:{
          IfStmt();
          break;
          }
        case WHILE:{
          WhileStmt();
          break;
          }
        case SELECT:{
          SelectStmt();
          break;
          }
        case DIM:{
          DimStmt();
          break;
          }
        case BREAK:{
          BreakStmt();
          break;
          }
        case CONTINUE:{
          ContinueStmt();
          break;
          }
        case PRINT:{
          PrintStmt();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          if (jj_2_1(2)) {
            ReturnStmt();
          } else if (jj_2_2(2)) {
            CallFunc();
          } else if (jj_2_3(2)) {
            Expression();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("Stmt");
    }
  }

  final public void DefFunc() throws ParseException {
    trace_call("DefFunc");
    try {/*@bgen(jjtree) DefFunc */
  ASTDefFunc jjtn000 = new ASTDefFunc(JJTDEFFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        jj_consume_token(FUNC);
        FuncName();
        Arguments();
        jj_consume_token(AS);
        t = jj_consume_token(TYPE);
jjtn000.nodeValue = t.image;
        FuncBlock();
        jj_consume_token(ENDFUNC);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("DefFunc");
    }
  }

  final public void CallFunc() throws ParseException {
    trace_call("CallFunc");
    try {/*@bgen(jjtree) CallFunc */
  ASTCallFunc jjtn000 = new ASTCallFunc(JJTCALLFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        FuncName();
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          jj_consume_token(RPAREN);
          break;
          }
        case MINUS:
        case LPAREN:
        case STR_START:
        case INTEGER:
        case FLOAT:
        case IDENTIFIER:{
          CompExpr();
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              break label_6;
            }
            jj_consume_token(COMMA);
            CompExpr();
          }
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("CallFunc");
    }
  }

  final public void IfStmt() throws ParseException {
    trace_call("IfStmt");
    try {/*@bgen(jjtree) IfStmt */
  ASTIfStmt jjtn000 = new ASTIfStmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        CompExpr();
        jj_consume_token(RPAREN);
        jj_consume_token(THEN);
        Block();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSEIF:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_7;
          }
          jj_consume_token(ELSEIF);
          jj_consume_token(LPAREN);
          CompExpr();
          jj_consume_token(RPAREN);
          jj_consume_token(THEN);
          Block();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          Block();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(ENDIF);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("IfStmt");
    }
  }

  final public void WhileStmt() throws ParseException {
    trace_call("WhileStmt");
    try {/*@bgen(jjtree) WhileStmt */
  ASTWhileStmt jjtn000 = new ASTWhileStmt(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(WHILE);
        CompExpr();
        WhileBlock();
        jj_consume_token(ENDWHILE);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("WhileStmt");
    }
  }

  final public void SelectStmt() throws ParseException {
    trace_call("SelectStmt");
    try {/*@bgen(jjtree) SelectStmt */
  ASTSelectStmt jjtn000 = new ASTSelectStmt(JJTSELECTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SELECT);
        CompExpr();
        label_8:
        while (true) {
          jj_consume_token(CASE);
          CompExpr();
          jj_consume_token(COLON);
          Block();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_8;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASEELSE:{
          jj_consume_token(CASEELSE);
          jj_consume_token(COLON);
          Block();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        jj_consume_token(ENDSELECT);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("SelectStmt");
    }
  }

  final public void DimStmt() throws ParseException {
    trace_call("DimStmt");
    try {/*@bgen(jjtree) DimStmt */
  ASTDimStmt jjtn000 = new ASTDimStmt(JJTDIMSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        jj_consume_token(DIM);
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          Subscript();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(AS);
        t = jj_consume_token(TYPE);
jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
jjtn000.nodeValue = t.image;
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("DimStmt");
    }
  }

  final public void BreakStmt() throws ParseException {
    trace_call("BreakStmt");
    try {/*@bgen(jjtree) BreakStmt */
  ASTBreakStmt jjtn000 = new ASTBreakStmt(JJTBREAKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(BREAK);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("BreakStmt");
    }
  }

  final public void ContinueStmt() throws ParseException {
    trace_call("ContinueStmt");
    try {/*@bgen(jjtree) ContinueStmt */
  ASTContinueStmt jjtn000 = new ASTContinueStmt(JJTCONTINUESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CONTINUE);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ContinueStmt");
    }
  }

  final public void PrintStmt() throws ParseException {
    trace_call("PrintStmt");
    try {/*@bgen(jjtree) PrintStmt */
  ASTPrintStmt jjtn000 = new ASTPrintStmt(JJTPRINTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PRINT);
        CompExpr();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("PrintStmt");
    }
  }

  final public void ReturnStmt() throws ParseException {
    trace_call("ReturnStmt");
    try {/*@bgen(jjtree) ReturnStmt */
  ASTReturnStmt jjtn000 = new ASTReturnStmt(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(RETURN);
        CompExpr();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ReturnStmt");
    }
  }

//void VarArray():
//{}
//{
//	t = <IDENTIFIER> {jjtThis.nodeValue = t.image}
//	<LPAREN> ExpressionList() <RpAREN> 
//}
  final public 
void ExpressionList() throws ParseException {
    trace_call("ExpressionList");
    try {
      Expression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } finally {
      trace_return("ExpressionList");
    }
  }

  final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      AssignExpr();
    } finally {
      trace_return("Expression");
    }
  }

  final public void AssignExpr() throws ParseException {
    trace_call("AssignExpr");
    try {
      Var();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
        try {
          EqualCompExpr();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
        }
        break;
        }
      case ADDASSIGN:{
        jj_consume_token(ADDASSIGN);
ASTAddAssign jjtn002 = new ASTAddAssign(JJTADDASSIGN);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
        try {
          EqualCompExpr();
        } catch (Throwable jjte002) {
if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte002;}
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte002;}
                                              }
                                              {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
        }
        break;
        }
      case SUBASSIGN:{
        jj_consume_token(SUBASSIGN);
ASTSubAssign jjtn003 = new ASTSubAssign(JJTSUBASSIGN);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
        try {
          EqualCompExpr();
        } catch (Throwable jjte003) {
if (jjtc003) {
                                                jjtree.clearNodeScope(jjtn003);
                                                jjtc003 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte003 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte003;}
                                              }
                                              if (jjte003 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte003;}
                                              }
                                              {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003,  2);
                                              }
        }
        break;
        }
      case MULASSIGN:{
        jj_consume_token(MULASSIGN);
ASTMulAssign jjtn004 = new ASTMulAssign(JJTMULASSIGN);
                                              boolean jjtc004 = true;
                                              jjtree.openNodeScope(jjtn004);
        try {
          EqualCompExpr();
        } catch (Throwable jjte004) {
if (jjtc004) {
                                                jjtree.clearNodeScope(jjtn004);
                                                jjtc004 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte004 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte004;}
                                              }
                                              if (jjte004 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte004;}
                                              }
                                              {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                              }
        }
        break;
        }
      case DIVASSIGN:{
        jj_consume_token(DIVASSIGN);
ASTDivAssign jjtn005 = new ASTDivAssign(JJTDIVASSIGN);
                                              boolean jjtc005 = true;
                                              jjtree.openNodeScope(jjtn005);
        try {
          EqualCompExpr();
        } catch (Throwable jjte005) {
if (jjtc005) {
                                                jjtree.clearNodeScope(jjtn005);
                                                jjtc005 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte005 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte005;}
                                              }
                                              if (jjte005 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte005;}
                                              }
                                              {if (true) throw (Error)jjte005;}
        } finally {
if (jjtc005) {
                                                jjtree.closeNodeScope(jjtn005,  2);
                                              }
        }
        break;
        }
      case MODASSIGN:{
        jj_consume_token(MODASSIGN);
ASTModAssign jjtn006 = new ASTModAssign(JJTMODASSIGN);
                                              boolean jjtc006 = true;
                                              jjtree.openNodeScope(jjtn006);
        try {
          EqualCompExpr();
        } catch (Throwable jjte006) {
if (jjtc006) {
                                                jjtree.clearNodeScope(jjtn006);
                                                jjtc006 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte006 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte006;}
                                              }
                                              if (jjte006 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte006;}
                                              }
                                              {if (true) throw (Error)jjte006;}
        } finally {
if (jjtc006) {
                                                jjtree.closeNodeScope(jjtn006,  2);
                                              }
        }
        break;
        }
      case POWASSIGN:{
        jj_consume_token(POWASSIGN);
ASTPowAssign jjtn007 = new ASTPowAssign(JJTPOWASSIGN);
                                              boolean jjtc007 = true;
                                              jjtree.openNodeScope(jjtn007);
        try {
          EqualCompExpr();
        } catch (Throwable jjte007) {
if (jjtc007) {
                                                jjtree.clearNodeScope(jjtn007);
                                                jjtc007 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte007 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte007;}
                                              }
                                              if (jjte007 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte007;}
                                              }
                                              {if (true) throw (Error)jjte007;}
        } finally {
if (jjtc007) {
                                                jjtree.closeNodeScope(jjtn007,  2);
                                              }
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("AssignExpr");
    }
  }

  final public void CompExpr() throws ParseException {
    trace_call("CompExpr");
    try {
      BoolCompExpr();
    } finally {
      trace_return("CompExpr");
    }
  }

  final public void BoolCompExpr() throws ParseException {
    trace_call("BoolCompExpr");
    try {
      EqualCompExpr();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLAND:
        case BOOLOR:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLAND:{
          jj_consume_token(BOOLAND);
ASTBAnd jjtn001 = new ASTBAnd(JJTBAND);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
          try {
            EqualCompExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                              jjtree.clearNodeScope(jjtn001);
                                              jjtc001 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte001 instanceof RuntimeException) {
                                              {if (true) throw (RuntimeException)jjte001;}
                                            }
                                            if (jjte001 instanceof ParseException) {
                                              {if (true) throw (ParseException)jjte001;}
                                            }
                                            {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001,  2);
                                            }
          }
          break;
          }
        case BOOLOR:{
          jj_consume_token(BOOLOR);
ASTBOr jjtn002 = new ASTBOr(JJTBOR);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
          try {
            EqualCompExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte002;}
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte002;}
                                           }
                                           {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  2);
                                           }
          }
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("BoolCompExpr");
    }
  }

  final public void EqualCompExpr() throws ParseException {
    trace_call("EqualCompExpr");
    try {
      SizeCompExpr();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NEQ:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
ASTEq jjtn001 = new ASTEq(JJTEQ);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
          try {
            SizeCompExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
          }
          break;
          }
        case NEQ:{
          jj_consume_token(NEQ);
ASTNEq jjtn002 = new ASTNEq(JJTNEQ);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
          try {
            SizeCompExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
          }
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("EqualCompExpr");
    }
  }

  final public void SizeCompExpr() throws ParseException {
    trace_call("SizeCompExpr");
    try {
      AddExpr();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GE:
        case LE:
        case GT:
        case LT:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GE:{
          jj_consume_token(GE);
ASTGe jjtn001 = new ASTGe(JJTGE);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
          try {
            AddExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
          }
          break;
          }
        case GT:{
          jj_consume_token(GT);
ASTGt jjtn002 = new ASTGt(JJTGT);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
          try {
            AddExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                         jjtree.clearNodeScope(jjtn002);
                                         jjtc002 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte002 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte002;}
                                       }
                                       if (jjte002 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte002;}
                                       }
                                       {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002,  2);
                                       }
          }
          break;
          }
        case LE:{
          jj_consume_token(LE);
ASTLe jjtn003 = new ASTLe(JJTLE);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
          try {
            AddExpr();
          } catch (Throwable jjte003) {
if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte003;}
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte003;}
                                       }
                                       {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  2);
                                       }
          }
          break;
          }
        case LT:{
          jj_consume_token(LT);
ASTLt jjtn004 = new ASTLt(JJTLT);
                                       boolean jjtc004 = true;
                                       jjtree.openNodeScope(jjtn004);
          try {
            AddExpr();
          } catch (Throwable jjte004) {
if (jjtc004) {
                                         jjtree.clearNodeScope(jjtn004);
                                         jjtc004 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte004 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte004;}
                                       }
                                       if (jjte004 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte004;}
                                       }
                                       {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                         jjtree.closeNodeScope(jjtn004,  2);
                                       }
          }
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("SizeCompExpr");
    }
  }

  final public void AddExpr() throws ParseException {
    trace_call("AddExpr");
    try {
      MulExpr();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
          try {
            MulExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte001;}
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte001;}
                                          }
                                          {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
          }
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
ASTSub jjtn002 = new ASTSub(JJTSUB);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
          try {
            MulExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
          }
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("AddExpr");
    }
  }

  final public void MulExpr() throws ParseException {
    trace_call("MulExpr");
    try {
      UniExpr();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:
        case DIV:
        case MOD:
        case POWER:
        case AND:
        case OR:
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:{
          jj_consume_token(MUL);
ASTMul jjtn001 = new ASTMul(JJTMUL);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
          try {
            UniExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
          }
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
          try {
            UniExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
          }
          break;
          }
        case MOD:{
          jj_consume_token(MOD);
ASTMod jjtn003 = new ASTMod(JJTMOD);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
          try {
            UniExpr();
          } catch (Throwable jjte003) {
if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
          }
          break;
          }
        case POWER:{
          jj_consume_token(POWER);
ASTPower jjtn004 = new ASTPower(JJTPOWER);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
          try {
            UniExpr();
          } catch (Throwable jjte004) {
if (jjtc004) {
                                            jjtree.clearNodeScope(jjtn004);
                                            jjtc004 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte004 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte004;}
                                          }
                                          if (jjte004 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte004;}
                                          }
                                          {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  2);
                                          }
          }
          break;
          }
        case AND:{
          jj_consume_token(AND);
ASTAnd jjtn005 = new ASTAnd(JJTAND);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
          try {
            UniExpr();
          } catch (Throwable jjte005) {
if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte005;}
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte005;}
                                        }
                                        {if (true) throw (Error)jjte005;}
          } finally {
if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
          }
          break;
          }
        case OR:{
          jj_consume_token(OR);
ASTOr jjtn006 = new ASTOr(JJTOR);
                                       boolean jjtc006 = true;
                                       jjtree.openNodeScope(jjtn006);
          try {
            UniExpr();
          } catch (Throwable jjte006) {
if (jjtc006) {
                                         jjtree.clearNodeScope(jjtn006);
                                         jjtc006 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte006 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte006;}
                                       }
                                       if (jjte006 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte006;}
                                       }
                                       {if (true) throw (Error)jjte006;}
          } finally {
if (jjtc006) {
                                         jjtree.closeNodeScope(jjtn006,  2);
                                       }
          }
          break;
          }
        case NOT:{
          jj_consume_token(NOT);
ASTNot jjtn007 = new ASTNot(JJTNOT);
                                        boolean jjtc007 = true;
                                        jjtree.openNodeScope(jjtn007);
          try {
            UniExpr();
          } catch (Throwable jjte007) {
if (jjtc007) {
                                          jjtree.clearNodeScope(jjtn007);
                                          jjtc007 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte007 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte007;}
                                        }
                                        if (jjte007 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte007;}
                                        }
                                        {if (true) throw (Error)jjte007;}
          } finally {
if (jjtc007) {
                                          jjtree.closeNodeScope(jjtn007,  2);
                                        }
          }
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("MulExpr");
    }
  }

  final public void UniExpr() throws ParseException {
    trace_call("UniExpr");
    try {/*@bgen(jjtree) UniExpr */
  ASTUniExpr jjtn000 = new ASTUniExpr(JJTUNIEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case STR_START:
        case INTEGER:
        case FLOAT:
        case IDENTIFIER:{
          Literal();
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
jjtn000.nodeValue = "+";
          break;
          }
        case MINUS:{
          t = jj_consume_token(MINUS);
jjtn000.nodeValue = t.image;
          Literal();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("UniExpr");
    }
  }

  final public void Literal() throws ParseException {
    trace_call("Literal");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        Integer();
        break;
        }
      case FLOAT:{
        Float();
        break;
        }
      case STR_START:{
        String();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        CompExpr();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_4(2)) {
          CallFunc();
        } else if (jj_2_5(2)) {
          RefVar();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Literal");
    }
  }

  final public void Integer() throws ParseException {
    trace_call("Integer");
    try {/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Integer");
    }
  }

  final public void Float() throws ParseException {
    trace_call("Float");
    try {/*@bgen(jjtree) Float */
  ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(FLOAT);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Float");
    }
  }

  final public void String() throws ParseException {
    trace_call("String");
    try {/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        jj_consume_token(STR_START);
        t = jj_consume_token(STR);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("String");
    }
  }

  final public void Var() throws ParseException {
    trace_call("Var");
    try {/*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
jjtn000.nodeValue = t.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          Subscript();
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Var");
    }
  }

  final public void RefVar() throws ParseException {
    trace_call("RefVar");
    try {/*@bgen(jjtree) RefVar */
  ASTRefVar jjtn000 = new ASTRefVar(JJTREFVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
jjtn000.nodeValue = t.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          Subscript();
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RefVar");
    }
  }

  final public void Subscript() throws ParseException {
    trace_call("Subscript");
    try {/*@bgen(jjtree) Subscript */
  ASTSubscript jjtn000 = new ASTSubscript(JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LBRACKET);
        CompExpr();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          CompExpr();
        }
        jj_consume_token(RBRACKET);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Subscript");
    }
  }

  final public void FuncName() throws ParseException {
    trace_call("FuncName");
    try {/*@bgen(jjtree) FuncName */
  ASTFuncName jjtn000 = new ASTFuncName(JJTFUNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("FuncName");
    }
  }

  final public void Identifier() throws ParseException {
    trace_call("Identifier");
    try {/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Identifier");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(STR_START)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(POWASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(MODASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(DIVASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(MULASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(SUBASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(ADDASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExprParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e850a0,0x1e850a0,0x1e850a0,0x1e850a0,0x0,0x0,0x1c850a0,0x0,0x8000000,0x200,0x400,0x10000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0xf0000000,0xf0000000,0x8000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000000,0x4000000,0x4000000,0x4000000,0x400000,0x4080000,0x0,0x400000,0x78c0000,0x0,0x0,0x0,0x0,0x100000,0x400000,0x3f800,0x600,0x600,0x180,0x180,0x78,0x78,0x0,0x0,0x7,0x7,0x7840000,0x3840000,0x100000,0x100000,0x400000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExprParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExprParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExprParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExprParser(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
