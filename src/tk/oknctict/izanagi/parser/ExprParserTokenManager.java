/* ExprParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ExprParserTokenManager.java */
package tk.oknctict.izanagi.parser;

/** Token Manager. */
@SuppressWarnings("unused")public class ExprParserTokenManager implements ExprParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 58;
            return 5;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 58;
            return 16;
         }
         if ((active0 & 0x701ff3f40L) != 0L)
         {
            jjmatchedKind = 58;
            return 19;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 58;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0x501ef7f60L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
            return 19;
         }
         if ((active0 & 0x200100080L) != 0L)
            return 19;
         return -1;
      case 2:
         if ((active0 & 0x1e77f60L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
            return 19;
         }
         if ((active0 & 0x500080000L) != 0L)
            return 19;
         return -1;
      case 3:
         if ((active0 & 0x1e05020L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 3;
            }
            return 19;
         }
         if ((active0 & 0x42840L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x30700L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0xa04220L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 19;
         }
         if ((active0 & 0x42840L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1401000L) != 0L)
            return 19;
         return -1;
      case 5:
         if ((active0 & 0x42840L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800020L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 19;
         }
         if ((active0 & 0x204200L) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x800020L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
            return 19;
         }
         if ((active0 & 0x42040L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x42040L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800020L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x42040L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x40040L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 34:
         return jjStopAtPos(0, 55);
      case 37:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 40:
         return jjStopAtPos(0, 50);
      case 41:
         return jjStopAtPos(0, 51);
      case 42:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 43:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 44:
         return jjStopAtPos(0, 54);
      case 45:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 47:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 58:
         return jjStopAtPos(0, 15);
      case 60:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 61:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 62:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x830000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x42e40L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 91:
         return jjStopAtPos(0, 52);
      case 93:
         return jjStopAtPos(0, 53);
      case 94:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 61:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000L);
      case 102:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 19);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x600L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100042840L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400800000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 19);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 124:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x42840L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 109:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 19);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800020L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x30600L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x42840L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x24200L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 107:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 19);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 19);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         break;
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 19);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 110:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 19);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(8, 13);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(9, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(11, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(19); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(19); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(19); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if (curChar == 46)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(24); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(19); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(19); }
                  }
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(19); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(19); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if (curChar == 114 && kind > 25)
                     kind = 25;
                  break;
               case 1:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 116 && kind > 25)
                     kind = 25;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 103 && kind > 25)
                     kind = 25;
                  break;
               case 13:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(19); }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x5000000000000000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 63);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x5000000000000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffd9ffL & l) != 0L)
                     kind = 59;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  else if (curChar == 92)
                     { jjAddStates(3, 4); }
                  break;
               case 2:
                  if (curChar == 114)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  else if (curChar == 110)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  break;
               case 1:
                  if (curChar == 92)
                     { jjAddStates(3, 4); }
                  break;
               case 3:
                  if (curChar == 114 && kind > 61)
                     kind = 61;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 59)
                     kind = 59;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   21, 22, 23, 2, 3, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\106\165\156\143\164\151\157\156", 
"\105\156\144\40\106\165\156\143\164\151\157\156", "\111\146", "\124\150\145\156", "\105\154\163\145\111\146", 
"\105\154\163\145", "\105\156\144\40\111\146", "\127\150\151\154\145", 
"\105\156\144\40\127\150\151\154\145", "\123\145\154\145\143\164", "\72", "\103\141\163\145", 
"\103\141\163\145\40\105\154\163\145", "\105\156\144\40\123\145\154\145\143\164", "\104\151\155", "\141\163", 
"\122\145\164\165\162\156", "\102\162\145\141\153", "\103\157\156\164\151\156\165\145", 
"\120\162\151\156\164", null, "\53", "\55", "\52", "\57", "\45", "\136", "\101\156\144", "\117\162", 
"\116\157\164", "\76\75", "\74\75", "\76", "\74", "\75\75", "\41\75", "\46\46", "\174\174", 
"\75", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\136\75", "\50", "\51", 
"\133", "\135", "\54", "\42", null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 60 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         image.deleteCharAt(image.length() - 2);
         break;
      case 61 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         image.delete(image.length() - 2, image.length()); image.append("\u005cn");
         break;
      case 62 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         image.delete(image.length() - 2, image.length()); image.append("\u005ct");
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 63 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                image.deleteCharAt(image.length() - 1);
                matchedToken.image = image.toString();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ExprParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ExprParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_STR",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 0, 
};
static final long[] jjtoToken = {
   0x87ffffffffffffe1L, 0x0L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x7800000000000000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[25];
    private final int[] jjstateSet = new int[2 * 25];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
