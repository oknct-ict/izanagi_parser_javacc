/* ExprParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ExprParser.java */
package izanagi.expr.parser;
public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants, ExprParserConstants {/*@bgen(jjtree)*/
  protected JJTExprParserState jjtree = new JJTExprParserState();

//文法の定義
  final public ASTStart Start() throws ParseException {
    trace_call("Start");
    try {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        EqualCompExpr();
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
  }

  final public void EqualCompExpr() throws ParseException {
    trace_call("EqualCompExpr");
    try {
      SizeCompExpr();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NEQ:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
ASTEq jjtn001 = new ASTEq(JJTEQ);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
          try {
            SizeCompExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
          }
          break;
          }
        case NEQ:{
          jj_consume_token(NEQ);
ASTNEq jjtn002 = new ASTNEq(JJTNEQ);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
          try {
            SizeCompExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
          }
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("EqualCompExpr");
    }
  }

  final public void SizeCompExpr() throws ParseException {
    trace_call("SizeCompExpr");
    try {
      AddExpr();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GE:
        case GT:
        case LE:
        case LT:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GE:{
          jj_consume_token(GE);
ASTGe jjtn001 = new ASTGe(JJTGE);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
          try {
            AddExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
          }
          break;
          }
        case GT:{
          jj_consume_token(GT);
ASTGt jjtn002 = new ASTGt(JJTGT);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
          try {
            AddExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                         jjtree.clearNodeScope(jjtn002);
                                         jjtc002 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte002 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte002;}
                                       }
                                       if (jjte002 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte002;}
                                       }
                                       {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002,  2);
                                       }
          }
          break;
          }
        case LE:{
          jj_consume_token(LE);
ASTLe jjtn003 = new ASTLe(JJTLE);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
          try {
            AddExpr();
          } catch (Throwable jjte003) {
if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte003;}
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte003;}
                                       }
                                       {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  2);
                                       }
          }
          break;
          }
        case LT:{
          jj_consume_token(LT);
ASTLt jjtn004 = new ASTLt(JJTLT);
                                       boolean jjtc004 = true;
                                       jjtree.openNodeScope(jjtn004);
          try {
            AddExpr();
          } catch (Throwable jjte004) {
if (jjtc004) {
                                         jjtree.clearNodeScope(jjtn004);
                                         jjtc004 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte004 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte004;}
                                       }
                                       if (jjte004 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte004;}
                                       }
                                       {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                         jjtree.closeNodeScope(jjtn004,  2);
                                       }
          }
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("SizeCompExpr");
    }
  }

  final public void AddExpr() throws ParseException {
    trace_call("AddExpr");
    try {
      MulExpr();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
          try {
            MulExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte001;}
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte001;}
                                          }
                                          {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
          }
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
ASTSub jjtn002 = new ASTSub(JJTSUB);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
          try {
            MulExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
          }
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("AddExpr");
    }
  }

  final public void MulExpr() throws ParseException {
    trace_call("MulExpr");
    try {
      UniExpr();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:
        case DIV:
        case MOD:
        case POWER:
        case AND:
        case OR:
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:{
          jj_consume_token(MUL);
ASTMul jjtn001 = new ASTMul(JJTMUL);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
          try {
            UniExpr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
          }
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
          try {
            UniExpr();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
          }
          break;
          }
        case MOD:{
          jj_consume_token(MOD);
ASTMod jjtn003 = new ASTMod(JJTMOD);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
          try {
            UniExpr();
          } catch (Throwable jjte003) {
if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
          }
          break;
          }
        case POWER:{
          jj_consume_token(POWER);
ASTPower jjtn004 = new ASTPower(JJTPOWER);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
          try {
            UniExpr();
          } catch (Throwable jjte004) {
if (jjtc004) {
                                            jjtree.clearNodeScope(jjtn004);
                                            jjtc004 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte004 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte004;}
                                          }
                                          if (jjte004 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte004;}
                                          }
                                          {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  2);
                                          }
          }
          break;
          }
        case AND:{
          jj_consume_token(AND);
ASTAnd jjtn005 = new ASTAnd(JJTAND);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
          try {
            UniExpr();
          } catch (Throwable jjte005) {
if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte005;}
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte005;}
                                        }
                                        {if (true) throw (Error)jjte005;}
          } finally {
if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
          }
          break;
          }
        case OR:{
          jj_consume_token(OR);
ASTOr jjtn006 = new ASTOr(JJTOR);
                                       boolean jjtc006 = true;
                                       jjtree.openNodeScope(jjtn006);
          try {
            UniExpr();
          } catch (Throwable jjte006) {
if (jjtc006) {
                                         jjtree.clearNodeScope(jjtn006);
                                         jjtc006 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte006 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte006;}
                                       }
                                       if (jjte006 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte006;}
                                       }
                                       {if (true) throw (Error)jjte006;}
          } finally {
if (jjtc006) {
                                         jjtree.closeNodeScope(jjtn006,  2);
                                       }
          }
          break;
          }
        case NOT:{
          jj_consume_token(NOT);
ASTNot jjtn007 = new ASTNot(JJTNOT);
                                        boolean jjtc007 = true;
                                        jjtree.openNodeScope(jjtn007);
          try {
            UniExpr();
          } catch (Throwable jjte007) {
if (jjtc007) {
                                          jjtree.clearNodeScope(jjtn007);
                                          jjtc007 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte007 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte007;}
                                        }
                                        if (jjte007 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte007;}
                                        }
                                        {if (true) throw (Error)jjte007;}
          } finally {
if (jjtc007) {
                                          jjtree.closeNodeScope(jjtn007,  2);
                                        }
          }
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("MulExpr");
    }
  }

  final public void UniExpr() throws ParseException {
    trace_call("UniExpr");
    try {/*@bgen(jjtree) UniExpr */
  ASTUniExpr jjtn000 = new ASTUniExpr(JJTUNIEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case STR_START:
        case INTEGER:
        case FLOAT:{
          Prime();
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.nodeValue = "+";
          break;
          }
        case MINUS:{
          t = jj_consume_token(MINUS);
jjtn000.nodeValue = t.image;
          Prime();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
      }
    } finally {
      trace_return("UniExpr");
    }
  }

  final public void Prime() throws ParseException {
    trace_call("Prime");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        Integer();
        break;
        }
      case FLOAT:{
        Float();
        break;
        }
      case STR_START:{
        String();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        AddExpr();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Prime");
    }
  }

  final public void Integer() throws ParseException {
    trace_call("Integer");
    try {/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Integer");
    }
  }

  final public void Float() throws ParseException {
    trace_call("Float");
    try {/*@bgen(jjtree) Float */
  ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(FLOAT);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Float");
    }
  }

  final public void String() throws ParseException {
    trace_call("String");
    try {/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        jj_consume_token(STR_START);
        t = jj_consume_token(STR);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.nodeValue = t.image;
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("String");
    }
  }

  /** Generated Token Manager. */
  public ExprParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180000,0x180000,0x78000,0x78000,0x60,0x60,0x3f80,0x3f80,0x3a00040,0x3a00000,};
   }

  /** Constructor with InputStream. */
  public ExprParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExprParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExprParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExprParser(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
