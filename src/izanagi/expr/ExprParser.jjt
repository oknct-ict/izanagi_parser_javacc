//オプション定義
options{
	STATIC=false;
	MULTI=true;
	VISITOR=true;
	NODE_EXTENDS="izanagi.expr.BaseNode";
	DEBUG_PARSER = true;
}

//パーサークラスの定義
PARSER_BEGIN(ExprParser)
package izanagi.expr.parser;
public class ExprParser{
}
PARSER_END(ExprParser)

//トークンの定義
SKIP:
{
	" " | "\r" | "\t" | "\n"
}
TOKEN:
{
		<DIM: "Dim">
	|	<AS: "as">
	|	<ASSIGN: "=">
	|	<TYPE: ("Integer" | "Float" | "String")>
	|	<IDENTIFIER: (["a"-"z"] | ["A"-"Z"] | "_") (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")*>
}
TOKEN:
{
		<PLUS : "+">
	|   <MINUS: "-">
	|	<MUL: "*">
	|	<DIV: "/">
	|	<MOD: "%">
	|	<POWER: "^">
	|	<AND: "And">
	|	<OR: "Or">
	|	<NOT: "Not">
	|	<GE: ">=">
	|	<GT: ">">
	|	<LE: "<=">
	|	<LT: "<">
	|	<EQ: "==">
	|	<NEQ: "!=">
	|	<LPAREN: "(">
	|	<RPAREN: ")">
	|	<COMMA: ",">
	|	<STR_START: "\""> : IN_STR
	|   <INTEGER: (["0" - "9"])+>
	|	<FLOAT: (["0" - "9"])+ "." (["0" - "9"])+>
}

<IN_STR> MORE:
{
		<~["\"", "\\", "\n", "\r", "\t"]>
	|	<"\\\"">
			{image.deleteCharAt(image.length() - 2); }
	|	<"\\n" | "\\r">
			{image.delete(image.length() - 2, image.length()); image.append("\n");}
	|	<"\\t">
			{image.delete(image.length() - 2, image.length()); image.append("\t");}
}

<IN_STR> TOKEN:
{
	<STR: "\"">{
		image.deleteCharAt(image.length() - 1);
		matchedToken.image = image.toString();
	} : DEFAULT
}

//文法の定義
ASTStart Start():
{}
{
		Expression() { return jjtThis;}
	|	DimStmt() { return jjtThis;}
}

void DimStmt():
{ Token t;}
{
	<DIM> Var() <AS> t = <TYPE> {jjtThis.nodeValue = t.image;} 
}

void Var():
{ Token t;}
{
		t = <IDENTIFIER> {jjtThis.nodeValue = t.image;}
}

//void VarArray():
//{}
//{
//	t = <IDENTIFIER> {jjtThis.nodeValue = t.image}
//	<LPAREN> ExpressionList() <RpAREN> 
//}

void ExpressionList() #void:
{}
{
	Expression() (<COMMA> Expression())*
}

void Expression() #void:
{}
{
	EqualCompExpr()
}

void EqualCompExpr() #void:
{}
{
	SizeCompExpr() (
				<EQ> SizeCompExpr() #Eq(2)
			|	<NEQ> SizeCompExpr() #NEq(2) )*
}

void SizeCompExpr() #void:
{}
{
	AddExpr() (
				<GE> AddExpr() #Ge(2)
			|	<GT> AddExpr() #Gt(2)
			|	<LE> AddExpr() #Le(2)
			|	<LT> AddExpr() #Lt(2) )*
}

void AddExpr() #void:
{}
{
	MulExpr() (
				<PLUS>  MulExpr() #Add(2)
			|   <MINUS> MulExpr() #Sub(2) )*
}

void MulExpr() #void:
{}
{
	UniExpr() (
				<MUL> UniExpr() #Mul(2)
			|	<DIV> UniExpr() #Div(2)
			|	<MOD> UniExpr() #Mod(2)
			|	<POWER> UniExpr() #Power(2)
			|	<AND> UniExpr() #And(2)
			|	<OR> UniExpr() #Or(2)
			|	<NOT> UniExpr() #Not(2) )*
}

void UniExpr():
{ Token t;}
{
		Literal() {jjtThis.nodeValue = "+";}
	|	t = <MINUS> {jjtThis.nodeValue = t.image;} Literal()
}

void Literal() #void:
{}
{
		Integer()
	|	Float()
	|	String()
	|	<LPAREN> AddExpr() <RPAREN>
}

void Integer():
{ Token t;}
{
	t = <INTEGER> { jjtThis.nodeValue = t.image;}
}

void Float():
{ Token t;}
{
	t = <FLOAT> {jjtThis.nodeValue = t.image;}
}

void String():
{ Token t;}
{
	<STR_START>
	t = <STR> {jjtThis.nodeValue = t.image;}
}
